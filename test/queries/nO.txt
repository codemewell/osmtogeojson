[out:json]; (way(around:{{short}},{{center}})["waterway"~"^(river|canal|stream)$"](if:t["name"]!=""); relation(around:{{short}},{{center}})["waterway"~"^(river|canal|stream|riverbank)$"](if:t["name"]!=""); way(around:{{short}},{{center}})["natural"="water"]["waterway"!="riverbank"]["amenity"!="fountain"](if:t["name"]!=""); way(around:{{short}},{{center}})["landuse"~"^(reservoir|basin)$"](if:t["name"]!=""); relation(around:{{short}},{{center}})["natural"="water"]["waterway"!="riverbank"](if:t["name"]!=""); )->.nearby_waterobjects; if(nearby_waterobjects.count(ways) > 0 || nearby_waterobjects.count(relations) > 0 ){make nearest_waterobjects_list list = nearby_waterobjects.set("{name:\'"+t["name"]+"\'}"); out; relation(around:{{long}},{{center}})["waterway"~"^(river|canal|stream)$"](if:t[\'name\']!="") -> .rivers_found_relations; way(around:{{long}},{{center}})["waterway"~"^(river|canal|stream)$"](if:t[\'name\']!="") -> .rivers_found_ways; if(rivers_found_ways.count(ways) > 0){for.rivers_found_ways->.river_way(t["name"]){rel(bw.river_way) -> .rel_as_member; for.rel_as_member -> .way_rels(id()){for.rivers_found_relations->.found_rels(id()){if(way_rels.val == found_rels.val){(.river_way;.river_ways_exclude;) ->.river_ways_exclude; } } } for.rivers_found_relations->.found_rels(t["name"]){if(river_way.val == found_rels.val){(.river_way;.river_ways_exclude;) ->.river_ways_exclude; } } } (.rivers_found_ways; - .river_ways_exclude;)->.river_ways_to_export; } (.rivers_found_relations;.river_ways_to_export;)->.river_list; make nearby_rivers_list list = river_list.set("{name:\'"+t["name"]+"\',id:"+id()+",type:\'"+type()+"\'}"); out; relation(around:{{long}},{{center}})["natural"="water"]["waterway"!="riverbank"](if:t[\'name\']!="") -> .lakes_found_relations; (way(around:{{long}},{{center}})["natural"="water"]["amenity"!="fountain"]["waterway"!="riverbank"](if:t[\'name\']!="");way(around:{{long}},{{center}})["landuse"~"^(reservoir|basin)$"]["waterway"!="riverbank"](if:t[\'name\']!="");) -> .lakes_found_ways; for.lakes_found_ways->.lake_way(t["name"]){rel(bw.lake_way) -> .rel_as_member; for.rel_as_member -> .way_rels(id()){for.lakes_found_relations->.found_rels(id()){if(way_rels.val == found_rels.val){(.lake_way;.lake_ways_exclude;) ->.lake_ways_exclude; } } } for.lakes_found_relations->.found_rels(t["name"]){if(lake_way.val == found_rels.val){(.lake_way;.lake_ways_exclude;) ->.lake_ways_exclude; } } } (.lakes_found_ways; - .lake_ways_exclude;)->.lake_ways_to_export; (.lakes_found_relations;.lake_ways_to_export;)->.lakes_list; make nearby_lakes_list list = lakes_list.set("{name:\'"+t["name"]+"\',id:"+id()+",type:\'"+type()+"\'}"); out; }else{(way(around:{{short}},{{center}})["waterway"~"^(river|canal|stream)$"]; relation(around:{{short}},{{center}})["waterway"~"^(river|canal|stream|riverbank)$"]; way(around:{{short}},{{center}})["natural"="water"]["waterway"!="riverbank"]["amenity"!="fountain"]; way(around:{{short}},{{center}})["landuse"~"^(reservoir|basin)$"]; relation(around:{{short}},{{center}})["natural"="water"]["waterway"!="riverbank"]; )->.nearby_waterobjects; if(nearby_waterobjects.count(ways) > 0 || nearby_waterobjects.count(relations) > 0 ){if(nearby_waterobjects.count(ways) > 1 || nearby_waterobjects.count(relations) > 1 ){make error text="More than 1 noname found", ::id=2; out; }else{if(nearby_waterobjects.count(relations) == 1){relation.nearby_waterobjects ->.noname_relation; make nearest_noname_waterobjects_list list = noname_relation.set("{id:"+id()+",type:\'"+type()+"\'}"); out; }else{way.nearby_waterobjects ->.noname_way; make nearest_noname_waterobjects_list list = noname_way.set("{id:"+id()+",type:\'"+type()+"\'}"); out; } } }else{make error text="Nothing found",::id=1; out; } }